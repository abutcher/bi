(defun make-quads(datums)
  (let ((ticks (middle-ticks datums))
	quad1 quad2 quad3 quad4)
    (dov (datum datums)
      (if (< (aref (row-2d-cells datum) 0) (first ticks))
	  (if (< (aref (row-2d-cells datum) 1) (second ticks))
	      (push (vector-to-list(row-raw-cells datum)) quad1)
	      (push (vector-to-list(row-raw-cells datum)) quad4))
	  (if (< (aref (row-2d-cells datum) 1) (second ticks))
	      (push (vector-to-list(row-raw-cells datum)) quad2)
	      (push (vector-to-list(row-raw-cells datum)) quad3))))
    (print quad1)
    (list quad1 quad2 quad3 quad4)))

(defun vector-to-list(vect)
  (map 'list #'(lambda (x) x) vect))
      
(defun middle-ticks(datums)
  (let* ((x (aref (row-2d-cells (aref (sort datums #'< :key #'(lambda (x) (if (complexp (aref (row-2d-cells x) 0))
									      0
									      (aref (row-2d-cells x) 0)))) (median-index datums))) 0))
	 (y (aref (row-2d-cells (aref (sort datums #'< :key #'(lambda (x) (if (complexp (aref (row-2d-cells x) 1))
									      0
									      (aref (row-2d-cells x) 1)))) (median-index datums))) 1)))
    (list x y)))

(defun median-index (list)
  (let ((len (length list)))
    (multiple-value-bind (integer remainder) (floor (/ len 2))
      integer)))
